/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package late.samples.state;

import static org.junit.Assert.*;

import java.util.Collections;
import org.apache.beam.sdk.coders.AvroCoder;
import org.apache.beam.sdk.testing.PAssert;
import org.apache.beam.sdk.testing.TestPipeline;
import org.apache.beam.sdk.testing.TestStream;
import org.apache.beam.sdk.transforms.Create;
import org.apache.beam.sdk.values.KV;
import org.apache.beam.sdk.values.PCollectionTuple;
import org.joda.time.Instant;
import org.joda.time.MutableDateTime;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class LateSampleStateTest {
  @Rule public TestPipeline p = TestPipeline.create();

  @Test
  public void testOneEvent() {
    LateSamplesState.Event event = new LateSamplesState.Event();
    event.key = "key1";
    event.value = "one";
    event.timestamp = Instant.now().getMillis();

    KV<String, Iterable<LateSamplesState.Event>> res =
        KV.of(event.key, Collections.singletonList(event));

    PCollectionTuple output =
        p.apply(Create.of(event)).apply(new LateSamplesState.WindowGroupState());

    PAssert.that(output.get(LateSamplesState.WindowGroupState.stateOutput)).containsInAnyOrder(res);
    PAssert.that(output.get(LateSamplesState.WindowGroupState.groupOutput)).containsInAnyOrder(res);

    p.run().waitUntilFinish();
  }

  @Test
  public void testOneEventLate() {
    LateSamplesState.Event event = new LateSamplesState.Event();
    event.key = "key1";
    event.value = "one";

    MutableDateTime dt = Instant.now().toMutableDateTime();
    dt.setYear(1984);

    event.timestamp = dt.toInstant().getMillis();

    TestStream<LateSamplesState.Event> eventStream =
        TestStream.create(AvroCoder.of(LateSamplesState.Event.class))
            .advanceWatermarkTo(Instant.now())
            .addElements(event)
            .advanceWatermarkToInfinity();

    KV<String, Iterable<LateSamplesState.Event>> res =
        KV.of(event.key, Collections.singletonList(event));

    PCollectionTuple output = p.apply(eventStream).apply(new LateSamplesState.WindowGroupState());

    PAssert.that(output.get(LateSamplesState.WindowGroupState.stateOutput)).empty();
    PAssert.that(output.get(LateSamplesState.WindowGroupState.groupOutput)).empty();

    p.run().waitUntilFinish();
  }

  @Test
  public void testTwoSamples() {
    LateSamplesState.Event event1 = new LateSamplesState.Event();
    event1.key = "key1";
    event1.value = "one";

    MutableDateTime dt = Instant.now().toMutableDateTime();
    dt.setYear(1984);

    event1.timestamp = dt.toInstant().getMillis();

    LateSamplesState.Event event2 = new LateSamplesState.Event();
    event2.key = "key2";
    event2.value = "two";

    dt.setYear(2019);
    dt.addDays(-3);

    event2.timestamp = dt.toInstant().getMillis();

    TestStream<LateSamplesState.Event> eventStream =
        TestStream.create(AvroCoder.of(LateSamplesState.Event.class))
            .advanceWatermarkTo(Instant.now())
            .addElements(event1)
            .addElements(event2)
            .advanceWatermarkToInfinity();

    KV<String, Iterable<LateSamplesState.Event>> res =
        KV.of(event2.key, Collections.singletonList(event2));

    PCollectionTuple output = p.apply(eventStream).apply(new LateSamplesState.WindowGroupState());

    PAssert.that(output.get(LateSamplesState.WindowGroupState.stateOutput)).containsInAnyOrder(res);
    PAssert.that(output.get(LateSamplesState.WindowGroupState.groupOutput)).containsInAnyOrder(res);

    p.run().waitUntilFinish();
  }
}
